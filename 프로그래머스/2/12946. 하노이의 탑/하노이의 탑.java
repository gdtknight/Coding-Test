import java.util.List;
import java.util.ArrayList;

// n개의 원판
// -> (n - 1) 개의 원판을 2번 기둥으로 옮긴다.
// -> n번째 원판을 3번 기둥으로 옮긴다.
// -> (n - 1) 개의 원판을 3번 기둥으로 옮긴다.

/* 
 * 원판이 3개인 경우
 * 1, 2 원판을 2번 기둥으로 옮긴다.
 *   -> 1번 원판을 3번 기둥으로 옮긴다.
 *   -> 2번 원판을 2번 기둥으로 옮긴다.
 *   -> 1번 원판을 2번 기둥으로 옮긴다.
 * 3번 원판을 3번 기둥으로 옮긴다.
 * 1, 2 원판을 3번 기둥으로 옮긴다.
 *   -> 1번 원판을 1번 기둥으로 옮긴다.
 *   -> 2번 원판을 3번 기둥으로 옮긴다.
 *   -> 1번 원판을 3번 기둥으로 옮긴다.
 */

/* 
 * 원판이 4개인 경우
 * 1, 2, 3 원판을 2번 기둥으로 옮긴다.
 *   -> 1, 2 원판을 3번 기둥으로 옮긴다.
 *      -> 1 원판을 2번 기둥으로 옮긴다.
 *      -> 2 원판을 3번 기둥으로 옮긴다.
 *      -> 1 원판을 3번 기둥으로 옮긴다.
 *   -> 3 원판을 2번 기둥으로 옮긴다.
 *   -> 1, 2 원판을 2번 기둥으로 옮긴다.
 *      -> 1 원판을 1번 기둥으로 옮긴다.
 *      -> 2 원판을 2번 기둥으로 옮긴다.
 *      -> 1 원판을 2번 기둥으로 옮긴다.
 * 4번 원판을 3번 기둥으로 옮긴다.
 * 1, 2, 3 원판을 3번 기둥으로 옮긴다.
 *   -> 1번 원판을 1번 기둥으로 옮긴다.
 *   -> 2번 원판을 3번 기둥으로 옮긴다.
 *   -> 1번 원판을 3번 기둥으로 옮긴다.
 */


class Solution {
    List<int[]> list = new ArrayList<>();
    
    public int[][] solution(int n) {
        hanoi(n, 1, 3);
        return list.stream().toArray(int[][]::new);
    }
    
    public void hanoi(int n, int from, int to) {
        if (n == 0)
            return ;
        int next = 6 - from - to;
        hanoi(n - 1, from, next);
        list.add(new int[]{from, to});
        hanoi(n - 1, next, to);
    }
}